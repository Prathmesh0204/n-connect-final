# Generated by Django 5.2.5 on 2025-09-04 14:05

import api.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('password_change', 'Password Change'), ('assign_flat', 'Assign Flat'), ('remove_tenant', 'Remove Tenant')], max_length=20)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'activity_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Flat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flat_number', models.CharField(db_index=True, max_length=10, unique=True)),
                ('floor', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('area_sqft', models.PositiveIntegerField(blank=True, null=True)),
                ('bedrooms', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('bathrooms', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('building', models.CharField(blank=True, max_length=50)),
                ('is_occupied', models.BooleanField(default=False)),
                ('monthly_rent', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('security_deposit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('lease_start_date', models.DateField(blank=True, null=True)),
                ('lease_end_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_flats', to=settings.AUTH_USER_MODEL)),
                ('tenants', models.ManyToManyField(blank=True, related_name='rented_flats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'flats',
                'ordering': ['flat_number'],
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('maintenance', 'Maintenance'), ('plumbing', 'Plumbing'), ('electrical', 'Electrical'), ('security', 'Security'), ('noise', 'Noise Complaint'), ('parking', 'Parking'), ('elevator', 'Elevator'), ('cleaning', 'Cleaning'), ('other', 'Other')], default='other', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=15)),
                ('image', models.ImageField(blank=True, null=True, upload_to=api.models.complaint_image_path, validators=[api.models.validate_image_file])),
                ('location', models.CharField(blank=True, max_length=200)),
                ('admin_response', models.TextField(blank=True)),
                ('estimated_resolution_date', models.DateField(blank=True, null=True)),
                ('actual_resolution_date', models.DateField(blank=True, null=True)),
                ('satisfaction_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('satisfaction_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_complaints', to=settings.AUTH_USER_MODEL)),
                ('flat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to='api.flat')),
            ],
            options={
                'db_table': 'complaints',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CameraAccessRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField()),
                ('requested_date', models.DateField(default=django.utils.timezone.now)),
                ('requested_time', models.TimeField(default=django.utils.timezone.now)),
                ('duration_hours', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
                ('camera_location', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=10)),
                ('approval_details', models.TextField(blank=True, null=True)),
                ('access_link', models.URLField(blank=True, null=True)),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='qr_codes/')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_camera_requests', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='camera_requests', to=settings.AUTH_USER_MODEL)),
                ('flat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='camera_requests', to='api.flat')),
            ],
            options={
                'db_table': 'camera_requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('general', 'General'), ('maintenance', 'Maintenance'), ('billing', 'Billing'), ('security', 'Security'), ('event', 'Event'), ('emergency', 'Emergency')], default='general', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('send_email', models.BooleanField(default=False)),
                ('send_sms', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
                ('read_by', models.ManyToManyField(blank=True, related_name='read_notifications', to=settings.AUTH_USER_MODEL)),
                ('recipients', models.ManyToManyField(blank=True, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, validators=[api.models.validate_phone_number])),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=api.models.user_avatar_path, validators=[api.models.validate_image_file])),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=15)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('force_password_change', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_number', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Enter valid vehicle number (e.g., MH12AB1234)', regex='^[A-Z]{2}[0-9]{2}[A-Z]{1,2}[0-9]{4}$')])),
                ('vehicle_type', models.CharField(choices=[('two_wheeler', 'Two Wheeler'), ('car', 'Car'), ('suv', 'SUV'), ('truck', 'Truck'), ('other', 'Other')], default='car', max_length=20)),
                ('brand', models.CharField(blank=True, max_length=50)),
                ('model', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(blank=True, max_length=30)),
                ('year_of_manufacture', models.PositiveIntegerField(blank=True, null=True)),
                ('insurance_expiry', models.DateField(blank=True, null=True)),
                ('pollution_certificate_expiry', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('parking_slot', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vehicles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FlatAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_type', models.CharField(choices=[('owner', 'Owner'), ('tenant', 'Tenant')], max_length=10)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_flats', to=settings.AUTH_USER_MODEL)),
                ('flat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='api.flat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flat_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'flat_assignments',
                'unique_together': {('flat', 'user', 'assignment_type')},
            },
        ),
        migrations.CreateModel(
            name='MaintenanceBill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bill_type', models.CharField(choices=[('maintenance', 'Maintenance'), ('electricity', 'Electricity'), ('water', 'Water'), ('gas', 'Gas'), ('internet', 'Internet'), ('parking', 'Parking'), ('other', 'Other')], default='maintenance', max_length=20)),
                ('bill_month', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('bill_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(2020)])),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('previous_reading', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('current_reading', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('units_consumed', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('rate_per_unit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('unpaid', 'Unpaid'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('partial', 'Partial Payment')], default='unpaid', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('late_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('payment_screenshot', models.ImageField(blank=True, null=True, upload_to='payments/', validators=[api.models.validate_image_file])),
                ('payment_mode', models.CharField(blank=True, choices=[('upi', 'UPI'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('cheque', 'Cheque'), ('online', 'Online Payment')], max_length=20, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('flat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bills', to='api.flat')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_bills', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'maintenance_bills',
                'ordering': ['-created_at'],
                'unique_together': {('flat', 'bill_month', 'bill_year', 'bill_type')},
            },
        ),
        migrations.CreateModel(
            name='TenantRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('message', models.TextField(blank=True)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True)),
                ('flat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_requests', to='api.flat')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_tenant_requests', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tenant_requests',
                'unique_together': {('tenant', 'flat')},
            },
        ),
    ]
